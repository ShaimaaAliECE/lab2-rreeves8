{"version":3,"sources":["Grid.js","index.js"],"names":["Cell","props","className","color","x","y","Column","newCells","j","cells","onClick","handleClick","Grid","Array","from","fill","state","playerTurn","winner","data","count","operator","k","i","this","curr","console","log","checkUpDown","checkLeftRight","op","val1","val2","array","s","columnNum","prevState","setState","checkWinner","columns","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.698f1640.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './App.css';\n\nfunction Cell(props){\n    return <div className = 'cell'>\n               <div className = {props.color}> \n                   {props.x}, {props.y}\n               </div>\n           </div>\n}\n\nfunction Column(props){ \n    let newCells = [];\n    for(let j = 0; j < 6; j++){\n        newCells[j] =<Cell\n                        key = {j}\n                        y = {j}\n                        x = {props.x}\n                        color = {props.cells[j]}\n                      ></Cell>\n        \n    }\n    \n    return <div className=\"collumn\" onClick = {() => props.handleClick()}> \n               {newCells}\n           </div>\n}\n\n\nclass Grid extends Component {\n    constructor(){\n        super();\n        var newCells =  Array.from(Array(7), () => {\n            return new Array(6).fill('none')\n        })\n        \n        this.state = {\n            cells: newCells,\n            playerTurn: 'red',\n            winner: ''\n        }\n    }\n\n    checkUpDown(data){\n        let nextColor = ''     \n        let count = 0;\n        let operator = '+'\n        \n        for(let k = 0; k < 2; k++){\n            for(let i = 1; i < 4; i++){\n                nextColor = data.cells[data.x][this.operator(operator,data.y,i)]\n                \n                if(nextColor === data.curr){\n                    count++; \n                }\n            }\n\n            if(count === 3){\n                return data.curr;\n            }\n\n            if(data.curr !== data.cells[data.x][data.y-1]){\n                break;\n            }\n            \n            operator = '-'\n        }\n\n        return ''\n    }\n\n    checkLeftRight(data){\n        let nextColor = ''     \n        let count = 0;\n        let operator = '+'\n\n        console.log(\"exam for \" + data.x + \",\" + data.y)\n\n\n        for(let k = 0; k < 2; k++){\n            for(let i = 1; i < 4; i++){\n                if(!(data.x + i >= 5)){\n                    nextColor = data.cells[this.operator(operator,data.x,i)][data.y]\n                    if(nextColor === data.curr){\n                        count++; \n                        console.log(count)\n                    }\n                }\n                else{\n                    operator = '-'\n                    break;\n                }\n            }\n\n            if(count === 3){\n                return data.curr;\n            }\n\n        }\n        return ''\n    }\n\n    checkWinner(cells){\n        let winner = ''; \n\n        for(let x = 0; x < 7; x++){\n            for(let y = 0; y < 6; y ++){\n                let curr = cells[x][y]\n\n                if(curr !== 'none'){\n                    let data = {\n                        curr: cells[x][y],\n                        cells: cells,\n                        x: x,\n                        y: y,\n                    }\n                    winner = this.checkUpDown(data)\n\n                    winner = this.checkLeftRight(data)\n                    \n                    if(winner !== ''){\n                        return winner\n                    }\n                   \n                }\n            }\n        }\n        return '';\n    }\n\n    operator(op, val1, val2){\n        if(op === '+'){\n            return val1 + val2;\n        }\n        if(op === '-'){\n            return val1-val2;\n        }\n    }\n\n\n    printArray(array){\n        for(let x = 0; x < 7; x++){\n            let s = ''\n            for(let y = 0; y < 6; y++){\n                s += ', ' + array[x][y]\n            }\n            console.log(s)\n        }\n    }\n\n    handleClick(columnNum) {        \n        if(this.state.winner === ''){       \n            for(let y = 6; y > -1; y--){\n                if(this.state.cells[columnNum][y] === 'none'){\n \n                    let prevState = this.state;\n                    let newCells = this.state.cells;\n                    newCells[columnNum][y] = prevState.playerTurn;\n\n\n                    this.setState({\n                        cells: newCells,    \n                        playerTurn: (prevState.playerTurn === 'red') ? 'black' : 'red',\n                        winner: this.checkWinner(newCells)\n                    })\n                    break;\n                }\n            }\n        }\n    }\n    \n    \n    render(){    \n        let columns = []\n        for(let i = 0; i < 7; i++){\n            columns[i] =\n                <Column\n                    key = {i}\n                    x = {i}\n                    cells = {this.state.cells[i]}\n                    handleClick = {() => this.handleClick(i)}\n                ></Column>\n        }\n        \n             \n        return(\n            <div>\n                <div className = 'grid'>\n                    {columns}\n                </div>\n                <div>\n                    {this.state.winner}\n                </div>\n            </div>\n        );\n  }\n}\n\n\nexport default Grid;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Grid from './Grid';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Grid />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}